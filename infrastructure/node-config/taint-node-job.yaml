---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-tainter
  namespace: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-tainter
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-tainter
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-tainter
subjects:
- kind: ServiceAccount
  name: node-tainter
  namespace: monitoring
---
apiVersion: batch/v1
kind: Job
metadata:
  name: taint-monitoring-node
  namespace: monitoring
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "0"
spec:
  ttlSecondsAfterFinished: 30
  template:
    spec:
      serviceAccountName: node-tainter
      restartPolicy: Never
      containers:
      - name: kubectl
        image: bitnami/kubectl:1.31
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Tainting and labeling k8s-monitoring-1 node..."
          
          # Add label
          kubectl label nodes k8s-monitoring-1 monitoring=true --overwrite
          
          # Add taint
          kubectl taint nodes k8s-monitoring-1 monitoring=true:NoSchedule --overwrite
          
          echo "Node configured successfully!"
          kubectl get node k8s-monitoring-1 -o jsonpath='{.spec.taints}' | grep -q "monitoring" && echo "✓ Taint applied" || echo "✗ Taint failed"
          kubectl get node k8s-monitoring-1 -o jsonpath='{.metadata.labels}' | grep -q "monitoring" && echo "✓ Label applied" || echo "✗ Label failed"