# DomainDB Configuration

# Global settings
global:
  domain: domaindb.store

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  
  image:
    repository: ghcr.io/paulcardus/domaindb-frontend
    tag: latest
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: domaindb.store
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: domaindb-store-tls
        hosts:
          - domaindb.store
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    - name: NEXT_PUBLIC_API_URL
      value: "https://domaindb.store"

# Backend configuration
backend:
  enabled: true
  replicaCount: 2
  
  image:
    repository: ghcr.io/paulcardus/domaindb-backend
    tag: latest
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  
  # Use existing Redis instance from infrastructure
  env:
    - name: OLLAMA_HOST
      value: "http://192.168.68.133:11434"
    - name: REDIS_HOST
      value: "redis-master.redis.svc.cluster.local"
    - name: REDIS_PORT
      value: "6379"
    - name: REDIS_PASSWORD
      value: "changeme123"
    - name: WHOIS_CACHE_TTL
      value: "3600"
    - name: RATE_LIMIT_PER_HOUR
      value: "100"
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1"
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    
  readinessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 5
    periodSeconds: 5

# Disable Redis since we use the existing infrastructure Redis
redis:
  enabled: false